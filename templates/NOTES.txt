1. Server URL
{{- if .Values.ingress.enabled }}
  http://{{ .Values.ingress.host }}/
{{- else if contains "NodePort" .Values.server.servicetype }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "server.name" . }}-service )
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.server.servicetype }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w  '
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }}   --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
  echo http://localhost:38823/
{{- end }}
2. Toposervice Api URL
{{- if .Values.ingress.enabled }}
  http://{{ .Values.ingress.host }}/toposervice/
{{- else if contains "NodePort" .Values.toposervice.servicetype }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "toposervice.name" . }}-service )
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.toposervice.servicetype }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w  '
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }}   --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- end }}

